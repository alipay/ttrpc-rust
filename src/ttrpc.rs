// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ttrpc.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub service: ::std::string::String,
    pub method: ::std::string::String,
    pub payload: ::std::vec::Vec<u8>,
    pub timeout_nano: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // string service = 1;


    pub fn get_service(&self) -> &str {
        &self.service
    }
    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: ::std::string::String) {
        self.service = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut ::std::string::String {
        &mut self.service
    }

    // Take field
    pub fn take_service(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service, ::std::string::String::new())
    }

    // string method = 2;


    pub fn get_method(&self) -> &str {
        &self.method
    }
    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut ::std::string::String {
        &mut self.method
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.method, ::std::string::String::new())
    }

    // bytes payload = 3;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // int64 timeout_nano = 4;


    pub fn get_timeout_nano(&self) -> i64 {
        self.timeout_nano
    }
    pub fn clear_timeout_nano(&mut self) {
        self.timeout_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout_nano(&mut self, v: i64) {
        self.timeout_nano = v;
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.method)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timeout_nano = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service);
        }
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.method);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.payload);
        }
        if self.timeout_nano != 0 {
            my_size += ::protobuf::rt::value_size(4, self.timeout_nano, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        if !self.method.is_empty() {
            os.write_string(2, &self.method)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(3, &self.payload)?;
        }
        if self.timeout_nano != 0 {
            os.write_int64(4, self.timeout_nano)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "service",
                    |m: &Request| { &m.service },
                    |m: &mut Request| { &mut m.service },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "method",
                    |m: &Request| { &m.method },
                    |m: &mut Request| { &mut m.method },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &Request| { &m.payload },
                    |m: &mut Request| { &mut m.payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "timeout_nano",
                    |m: &Request| { &m.timeout_nano },
                    |m: &mut Request| { &mut m.timeout_nano },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Request>(
                    "Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Request {
        static mut instance: ::protobuf::lazy::Lazy<Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Request,
        };
        unsafe {
            instance.get(Request::new)
        }
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.service.clear();
        self.method.clear();
        self.payload.clear();
        self.timeout_nano = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Any {
    // message fields
    pub type_url: ::std::string::String,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Any {
    fn default() -> &'a Any {
        <Any as ::protobuf::Message>::default_instance()
    }
}

impl Any {
    pub fn new() -> Any {
        ::std::default::Default::default()
    }

    // string type_url = 1;


    pub fn get_type_url(&self) -> &str {
        &self.type_url
    }
    pub fn clear_type_url(&mut self) {
        self.type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_url(&mut self, v: ::std::string::String) {
        self.type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.type_url
    }

    // Take field
    pub fn take_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.type_url, ::std::string::String::new())
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Any {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.type_url)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.type_url);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.type_url.is_empty() {
            os.write_string(1, &self.type_url)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Any {
        Any::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type_url",
                    |m: &Any| { &m.type_url },
                    |m: &mut Any| { &mut m.type_url },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &Any| { &m.value },
                    |m: &mut Any| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Any>(
                    "Any",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Any {
        static mut instance: ::protobuf::lazy::Lazy<Any> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Any,
        };
        unsafe {
            instance.get(Any::new)
        }
    }
}

impl ::protobuf::Clear for Any {
    fn clear(&mut self) {
        self.type_url.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Any {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Any {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Status {
    // message fields
    pub code: Code,
    pub message: ::std::string::String,
    pub details: ::protobuf::RepeatedField<Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Status {
    fn default() -> &'a Status {
        <Status as ::protobuf::Message>::default_instance()
    }
}

impl Status {
    pub fn new() -> Status {
        ::std::default::Default::default()
    }

    // .grpc.Code code = 1;


    pub fn get_code(&self) -> Code {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = Code::OK;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: Code) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // repeated .grpc.Any details = 3;


    pub fn get_details(&self) -> &[Any] {
        &self.details
    }
    pub fn clear_details(&mut self) {
        self.details.clear();
    }

    // Param is passed by value, moved
    pub fn set_details(&mut self, v: ::protobuf::RepeatedField<Any>) {
        self.details = v;
    }

    // Mutable pointer to the field.
    pub fn mut_details(&mut self) -> &mut ::protobuf::RepeatedField<Any> {
        &mut self.details
    }

    // Take field
    pub fn take_details(&mut self) -> ::protobuf::RepeatedField<Any> {
        ::std::mem::replace(&mut self.details, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Status {
    fn is_initialized(&self) -> bool {
        for v in &self.details {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.code, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.details)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != Code::OK {
            my_size += ::protobuf::rt::enum_size(1, self.code);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        for value in &self.details {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.code != Code::OK {
            os.write_enum(1, self.code.value())?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        for v in &self.details {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Status {
        Status::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Code>>(
                    "code",
                    |m: &Status| { &m.code },
                    |m: &mut Status| { &mut m.code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &Status| { &m.message },
                    |m: &mut Status| { &mut m.message },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Any>>(
                    "details",
                    |m: &Status| { &m.details },
                    |m: &mut Status| { &mut m.details },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Status>(
                    "Status",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Status {
        static mut instance: ::protobuf::lazy::Lazy<Status> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Status,
        };
        unsafe {
            instance.get(Status::new)
        }
    }
}

impl ::protobuf::Clear for Status {
    fn clear(&mut self) {
        self.code = Code::OK;
        self.message.clear();
        self.details.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub status: ::protobuf::SingularPtrField<Status>,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // .grpc.Status status = 1;


    pub fn get_status(&self) -> &Status {
        self.status.as_ref().unwrap_or_else(|| Status::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut Status {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> Status {
        self.status.take().unwrap_or_else(|| Status::new())
    }

    // bytes payload = 2;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(2, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Status>>(
                    "status",
                    |m: &Response| { &m.status },
                    |m: &mut Response| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &Response| { &m.payload },
                    |m: &mut Response| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Response>(
                    "Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Response {
        static mut instance: ::protobuf::lazy::Lazy<Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Response,
        };
        unsafe {
            instance.get(Response::new)
        }
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.status.clear();
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Code {
    OK = 0,
    CANCELLED = 1,
    UNKNOWN = 2,
    INVALID_ARGUMENT = 3,
    DEADLINE_EXCEEDED = 4,
    NOT_FOUND = 5,
    ALREADY_EXISTS = 6,
    PERMISSION_DENIED = 7,
    UNAUTHENTICATED = 16,
    RESOURCE_EXHAUSTED = 8,
    FAILED_PRECONDITION = 9,
    ABORTED = 10,
    OUT_OF_RANGE = 11,
    UNIMPLEMENTED = 12,
    INTERNAL = 13,
    UNAVAILABLE = 14,
    DATA_LOSS = 15,
}

impl ::protobuf::ProtobufEnum for Code {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Code> {
        match value {
            0 => ::std::option::Option::Some(Code::OK),
            1 => ::std::option::Option::Some(Code::CANCELLED),
            2 => ::std::option::Option::Some(Code::UNKNOWN),
            3 => ::std::option::Option::Some(Code::INVALID_ARGUMENT),
            4 => ::std::option::Option::Some(Code::DEADLINE_EXCEEDED),
            5 => ::std::option::Option::Some(Code::NOT_FOUND),
            6 => ::std::option::Option::Some(Code::ALREADY_EXISTS),
            7 => ::std::option::Option::Some(Code::PERMISSION_DENIED),
            16 => ::std::option::Option::Some(Code::UNAUTHENTICATED),
            8 => ::std::option::Option::Some(Code::RESOURCE_EXHAUSTED),
            9 => ::std::option::Option::Some(Code::FAILED_PRECONDITION),
            10 => ::std::option::Option::Some(Code::ABORTED),
            11 => ::std::option::Option::Some(Code::OUT_OF_RANGE),
            12 => ::std::option::Option::Some(Code::UNIMPLEMENTED),
            13 => ::std::option::Option::Some(Code::INTERNAL),
            14 => ::std::option::Option::Some(Code::UNAVAILABLE),
            15 => ::std::option::Option::Some(Code::DATA_LOSS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Code] = &[
            Code::OK,
            Code::CANCELLED,
            Code::UNKNOWN,
            Code::INVALID_ARGUMENT,
            Code::DEADLINE_EXCEEDED,
            Code::NOT_FOUND,
            Code::ALREADY_EXISTS,
            Code::PERMISSION_DENIED,
            Code::UNAUTHENTICATED,
            Code::RESOURCE_EXHAUSTED,
            Code::FAILED_PRECONDITION,
            Code::ABORTED,
            Code::OUT_OF_RANGE,
            Code::UNIMPLEMENTED,
            Code::INTERNAL,
            Code::UNAVAILABLE,
            Code::DATA_LOSS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Code", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Code {
}

impl ::std::default::Default for Code {
    fn default() -> Self {
        Code::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for Code {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bttrpc.proto\x12\x04grpc\"x\n\x07Request\x12\x18\n\x07service\x18\
    \x01\x20\x01(\tR\x07service\x12\x16\n\x06method\x18\x02\x20\x01(\tR\x06m\
    ethod\x12\x18\n\x07payload\x18\x03\x20\x01(\x0cR\x07payload\x12!\n\x0cti\
    meout_nano\x18\x04\x20\x01(\x03R\x0btimeoutNano\"6\n\x03Any\x12\x19\n\
    \x08type_url\x18\x01\x20\x01(\tR\x07typeUrl\x12\x14\n\x05value\x18\x02\
    \x20\x01(\x0cR\x05value\"g\n\x06Status\x12\x1e\n\x04code\x18\x01\x20\x01\
    (\x0e2\n.grpc.CodeR\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07\
    message\x12#\n\x07details\x18\x03\x20\x03(\x0b2\t.grpc.AnyR\x07details\"\
    J\n\x08Response\x12$\n\x06status\x18\x01\x20\x01(\x0b2\x0c.grpc.StatusR\
    \x06status\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07payload*\xb7\
    \x02\n\x04Code\x12\x06\n\x02OK\x10\0\x12\r\n\tCANCELLED\x10\x01\x12\x0b\
    \n\x07UNKNOWN\x10\x02\x12\x14\n\x10INVALID_ARGUMENT\x10\x03\x12\x15\n\
    \x11DEADLINE_EXCEEDED\x10\x04\x12\r\n\tNOT_FOUND\x10\x05\x12\x12\n\x0eAL\
    READY_EXISTS\x10\x06\x12\x15\n\x11PERMISSION_DENIED\x10\x07\x12\x13\n\
    \x0fUNAUTHENTICATED\x10\x10\x12\x16\n\x12RESOURCE_EXHAUSTED\x10\x08\x12\
    \x17\n\x13FAILED_PRECONDITION\x10\t\x12\x0b\n\x07ABORTED\x10\n\x12\x10\n\
    \x0cOUT_OF_RANGE\x10\x0b\x12\x11\n\rUNIMPLEMENTED\x10\x0c\x12\x0c\n\x08I\
    NTERNAL\x10\r\x12\x0f\n\x0bUNAVAILABLE\x10\x0e\x12\r\n\tDATA_LOSS\x10\
    \x0fJ\x8dJ\n\x07\x12\x05\x0e\0\xf3\x01\x01\n\xc3\x04\n\x01\x0c\x12\x03\
    \x0e\0\x122\xb8\x04\x20Copyright\x20(c)\x202019\x20Ant\x20Financial\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\x08\n\x01\x02\x12\x03\x10\0\r\n\n\n\x02\x04\0\x12\x04\x12\0\x17\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x12\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x13\x08\x1b\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x13\x08\x0e\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x13\x0f\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x13\x19\x1a\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x14\x08\x1a\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x14\x08\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x14\x0f\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x14\x18\x19\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\x15\x08\x1a\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x15\x08\r\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x15\x0e\x15\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x15\x18\x19\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\x16\x08\x1f\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x16\x08\r\
    \n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x16\x0e\x1a\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x16\x1d\x1e\nR\n\x02\x04\x01\x12\x04\x1a\0:\x01\x1aF\
    \x20Get\x20from\x20github.com/gogo/protobuf/protobuf/google/protobuf/any\
    .proto\n\n\n\n\x03\x04\x01\x01\x12\x03\x1a\x08\x0b\n\xa0\n\n\x04\x04\x01\
    \x02\0\x12\x036\x02\x16\x1a\x92\n\x20A\x20URL/resource\x20name\x20that\
    \x20uniquely\x20identifies\x20the\x20type\x20of\x20the\x20serialized\n\
    \x20protocol\x20buffer\x20message.\x20The\x20last\x20segment\x20of\x20th\
    e\x20URL's\x20path\x20must\x20represent\n\x20the\x20fully\x20qualified\
    \x20name\x20of\x20the\x20type\x20(as\x20in\n\x20`path/google.protobuf.Du\
    ration`).\x20The\x20name\x20should\x20be\x20in\x20a\x20canonical\x20form\
    \n\x20(e.g.,\x20leading\x20\".\"\x20is\x20not\x20accepted).\n\n\x20In\
    \x20practice,\x20teams\x20usually\x20precompile\x20into\x20the\x20binary\
    \x20all\x20types\x20that\x20they\n\x20expect\x20it\x20to\x20use\x20in\
    \x20the\x20context\x20of\x20Any.\x20However,\x20for\x20URLs\x20which\x20\
    use\x20the\n\x20scheme\x20`http`,\x20`https`,\x20or\x20no\x20scheme,\x20\
    one\x20can\x20optionally\x20set\x20up\x20a\x20type\n\x20server\x20that\
    \x20maps\x20type\x20URLs\x20to\x20message\x20definitions\x20as\x20follow\
    s:\n\n\x20*\x20If\x20no\x20scheme\x20is\x20provided,\x20`https`\x20is\
    \x20assumed.\n\x20*\x20An\x20HTTP\x20GET\x20on\x20the\x20URL\x20must\x20\
    yield\x20a\x20[google.protobuf.Type][]\n\x20\x20\x20value\x20in\x20binar\
    y\x20format,\x20or\x20produce\x20an\x20error.\n\x20*\x20Applications\x20\
    are\x20allowed\x20to\x20cache\x20lookup\x20results\x20based\x20on\x20the\
    \n\x20\x20\x20URL,\x20or\x20have\x20them\x20precompiled\x20into\x20a\x20\
    binary\x20to\x20avoid\x20any\n\x20\x20\x20lookup.\x20Therefore,\x20binar\
    y\x20compatibility\x20needs\x20to\x20be\x20preserved\n\x20\x20\x20on\x20\
    changes\x20to\x20types.\x20(Use\x20versioned\x20type\x20names\x20to\x20m\
    anage\n\x20\x20\x20breaking\x20changes.)\n\n\x20Note:\x20this\x20functio\
    nality\x20is\x20not\x20currently\x20available\x20in\x20the\x20official\n\
    \x20protobuf\x20release,\x20and\x20it\x20is\x20not\x20used\x20for\x20typ\
    e\x20URLs\x20beginning\x20with\n\x20type.googleapis.com.\n\n\x20Schemes\
    \x20other\x20than\x20`http`,\x20`https`\x20(or\x20the\x20empty\x20scheme\
    )\x20might\x20be\n\x20used\x20with\x20implementation\x20specific\x20sema\
    ntics.\n\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x036\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x036\t\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x036\
    \x14\x15\nV\n\x04\x04\x01\x02\x01\x12\x039\x02\x12\x1aI\x20Must\x20be\
    \x20a\x20valid\x20serialized\x20protocol\x20buffer\x20of\x20the\x20above\
    \x20specified\x20type.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x039\x02\
    \x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x039\x08\r\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x039\x10\x11\n\x89\x03\n\x02\x05\0\x12\x05D\0\xdd\x01\
    \x01\x1a\xfb\x02\x20Get\x20from\x20github.com/gogo/googleapis/google/rpc\
    /code.proto\n\x20The\x20canonical\x20error\x20codes\x20for\x20Google\x20\
    APIs.\n\n\n\x20Sometimes\x20multiple\x20error\x20codes\x20may\x20apply.\
    \x20\x20Services\x20should\x20return\n\x20the\x20most\x20specific\x20err\
    or\x20code\x20that\x20applies.\x20\x20For\x20example,\x20prefer\n\x20`OU\
    T_OF_RANGE`\x20over\x20`FAILED_PRECONDITION`\x20if\x20both\x20codes\x20a\
    pply.\n\x20Similarly\x20prefer\x20`NOT_FOUND`\x20or\x20`ALREADY_EXISTS`\
    \x20over\x20`FAILED_PRECONDITION`.\n\n\n\n\x03\x05\0\x01\x12\x03D\x05\t\
    \nG\n\x04\x05\0\x02\0\x12\x03H\x02\t\x1a:\x20Not\x20an\x20error;\x20retu\
    rned\x20on\x20success\n\n\x20HTTP\x20Mapping:\x20200\x20OK\n\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03H\x02\x04\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03H\
    \x07\x08\nn\n\x04\x05\0\x02\x01\x12\x03M\x02\x10\x1aa\x20The\x20operatio\
    n\x20was\x20cancelled,\x20typically\x20by\x20the\x20caller.\n\n\x20HTTP\
    \x20Mapping:\x20499\x20Client\x20Closed\x20Request\n\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03M\x02\x0b\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03M\x0e\
    \x0f\n\xda\x02\n\x04\x05\0\x02\x02\x12\x03V\x02\x0e\x1a\xcc\x02\x20Unkno\
    wn\x20error.\x20\x20For\x20example,\x20this\x20error\x20may\x20be\x20ret\
    urned\x20when\n\x20a\x20`Status`\x20value\x20received\x20from\x20another\
    \x20address\x20space\x20belongs\x20to\n\x20an\x20error\x20space\x20that\
    \x20is\x20not\x20known\x20in\x20this\x20address\x20space.\x20\x20Also\n\
    \x20errors\x20raised\x20by\x20APIs\x20that\x20do\x20not\x20return\x20eno\
    ugh\x20error\x20information\n\x20may\x20be\x20converted\x20to\x20this\
    \x20error.\n\n\x20HTTP\x20Mapping:\x20500\x20Internal\x20Server\x20Error\
    \n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03V\x02\t\n\x0c\n\x05\x05\0\x02\
    \x02\x02\x12\x03V\x0c\r\n\x92\x02\n\x04\x05\0\x02\x03\x12\x03^\x02\x17\
    \x1a\x84\x02\x20The\x20client\x20specified\x20an\x20invalid\x20argument.\
    \x20\x20Note\x20that\x20this\x20differs\n\x20from\x20`FAILED_PRECONDITIO\
    N`.\x20\x20`INVALID_ARGUMENT`\x20indicates\x20arguments\n\x20that\x20are\
    \x20problematic\x20regardless\x20of\x20the\x20state\x20of\x20the\x20syst\
    em\n\x20(e.g.,\x20a\x20malformed\x20file\x20name).\n\n\x20HTTP\x20Mappin\
    g:\x20400\x20Bad\x20Request\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03^\x02\
    \x12\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03^\x15\x16\n\xe4\x02\n\x04\x05\
    \0\x02\x04\x12\x03g\x02\x18\x1a\xd6\x02\x20The\x20deadline\x20expired\
    \x20before\x20the\x20operation\x20could\x20complete.\x20For\x20operation\
    s\n\x20that\x20change\x20the\x20state\x20of\x20the\x20system,\x20this\
    \x20error\x20may\x20be\x20returned\n\x20even\x20if\x20the\x20operation\
    \x20has\x20completed\x20successfully.\x20\x20For\x20example,\x20a\n\x20s\
    uccessful\x20response\x20from\x20a\x20server\x20could\x20have\x20been\
    \x20delayed\x20long\n\x20enough\x20for\x20the\x20deadline\x20to\x20expir\
    e.\n\n\x20HTTP\x20Mapping:\x20504\x20Gateway\x20Timeout\n\n\x0c\n\x05\
    \x05\0\x02\x04\x01\x12\x03g\x02\x13\n\x0c\n\x05\x05\0\x02\x04\x02\x12\
    \x03g\x16\x17\n\x9a\x03\n\x04\x05\0\x02\x05\x12\x03r\x02\x10\x1a\x8c\x03\
    \x20Some\x20requested\x20entity\x20(e.g.,\x20file\x20or\x20directory)\
    \x20was\x20not\x20found.\n\n\x20Note\x20to\x20server\x20developers:\x20i\
    f\x20a\x20request\x20is\x20denied\x20for\x20an\x20entire\x20class\n\x20o\
    f\x20users,\x20such\x20as\x20gradual\x20feature\x20rollout\x20or\x20undo\
    cumented\x20whitelist,\n\x20`NOT_FOUND`\x20may\x20be\x20used.\x20If\x20a\
    \x20request\x20is\x20denied\x20for\x20some\x20users\x20within\n\x20a\x20\
    class\x20of\x20users,\x20such\x20as\x20user-based\x20access\x20control,\
    \x20`PERMISSION_DENIED`\n\x20must\x20be\x20used.\n\n\x20HTTP\x20Mapping:\
    \x20404\x20Not\x20Found\n\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03r\x02\x0b\
    \n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03r\x0e\x0f\n\x83\x01\n\x04\x05\0\
    \x02\x06\x12\x03x\x02\x15\x1av\x20The\x20entity\x20that\x20a\x20client\
    \x20attempted\x20to\x20create\x20(e.g.,\x20file\x20or\x20directory)\n\
    \x20already\x20exists.\n\n\x20HTTP\x20Mapping:\x20409\x20Conflict\n\n\
    \x0c\n\x05\x05\0\x02\x06\x01\x12\x03x\x02\x10\n\x0c\n\x05\x05\0\x02\x06\
    \x02\x12\x03x\x13\x14\n\xfa\x03\n\x04\x05\0\x02\x07\x12\x04\x84\x01\x02\
    \x18\x1a\xeb\x03\x20The\x20caller\x20does\x20not\x20have\x20permission\
    \x20to\x20execute\x20the\x20specified\n\x20operation.\x20`PERMISSION_DEN\
    IED`\x20must\x20not\x20be\x20used\x20for\x20rejections\n\x20caused\x20by\
    \x20exhausting\x20some\x20resource\x20(use\x20`RESOURCE_EXHAUSTED`\n\x20\
    instead\x20for\x20those\x20errors).\x20`PERMISSION_DENIED`\x20must\x20no\
    t\x20be\n\x20used\x20if\x20the\x20caller\x20can\x20not\x20be\x20identifi\
    ed\x20(use\x20`UNAUTHENTICATED`\n\x20instead\x20for\x20those\x20errors).\
    \x20This\x20error\x20code\x20does\x20not\x20imply\x20the\n\x20request\
    \x20is\x20valid\x20or\x20the\x20requested\x20entity\x20exists\x20or\x20s\
    atisfies\n\x20other\x20pre-conditions.\n\n\x20HTTP\x20Mapping:\x20403\
    \x20Forbidden\n\n\r\n\x05\x05\0\x02\x07\x01\x12\x04\x84\x01\x02\x13\n\r\
    \n\x05\x05\0\x02\x07\x02\x12\x04\x84\x01\x16\x17\n\x7f\n\x04\x05\0\x02\
    \x08\x12\x04\x8a\x01\x02\x17\x1aq\x20The\x20request\x20does\x20not\x20ha\
    ve\x20valid\x20authentication\x20credentials\x20for\x20the\n\x20operatio\
    n.\n\n\x20HTTP\x20Mapping:\x20401\x20Unauthorized\n\n\r\n\x05\x05\0\x02\
    \x08\x01\x12\x04\x8a\x01\x02\x11\n\r\n\x05\x05\0\x02\x08\x02\x12\x04\x8a\
    \x01\x14\x16\n\xa6\x01\n\x04\x05\0\x02\t\x12\x04\x90\x01\x02\x19\x1a\x97\
    \x01\x20Some\x20resource\x20has\x20been\x20exhausted,\x20perhaps\x20a\
    \x20per-user\x20quota,\x20or\n\x20perhaps\x20the\x20entire\x20file\x20sy\
    stem\x20is\x20out\x20of\x20space.\n\n\x20HTTP\x20Mapping:\x20429\x20Too\
    \x20Many\x20Requests\n\n\r\n\x05\x05\0\x02\t\x01\x12\x04\x90\x01\x02\x14\
    \n\r\n\x05\x05\0\x02\t\x02\x12\x04\x90\x01\x17\x18\n\xd9\x07\n\x04\x05\0\
    \x02\n\x12\x04\xa4\x01\x02\x1a\x1a\xca\x07\x20The\x20operation\x20was\
    \x20rejected\x20because\x20the\x20system\x20is\x20not\x20in\x20a\x20stat\
    e\n\x20required\x20for\x20the\x20operation's\x20execution.\x20\x20For\
    \x20example,\x20the\x20directory\n\x20to\x20be\x20deleted\x20is\x20non-e\
    mpty,\x20an\x20rmdir\x20operation\x20is\x20applied\x20to\n\x20a\x20non-d\
    irectory,\x20etc.\n\n\x20Service\x20implementors\x20can\x20use\x20the\
    \x20following\x20guidelines\x20to\x20decide\n\x20between\x20`FAILED_PREC\
    ONDITION`,\x20`ABORTED`,\x20and\x20`UNAVAILABLE`:\n\x20\x20(a)\x20Use\
    \x20`UNAVAILABLE`\x20if\x20the\x20client\x20can\x20retry\x20just\x20the\
    \x20failing\x20call.\n\x20\x20(b)\x20Use\x20`ABORTED`\x20if\x20the\x20cl\
    ient\x20should\x20retry\x20at\x20a\x20higher\x20level\n\x20\x20\x20\x20\
    \x20\x20(e.g.,\x20when\x20a\x20client-specified\x20test-and-set\x20fails\
    ,\x20indicating\x20the\n\x20\x20\x20\x20\x20\x20client\x20should\x20rest\
    art\x20a\x20read-modify-write\x20sequence).\n\x20\x20(c)\x20Use\x20`FAIL\
    ED_PRECONDITION`\x20if\x20the\x20client\x20should\x20not\x20retry\x20unt\
    il\n\x20\x20\x20\x20\x20\x20the\x20system\x20state\x20has\x20been\x20exp\
    licitly\x20fixed.\x20\x20E.g.,\x20if\x20an\x20\"rmdir\"\n\x20\x20\x20\
    \x20\x20\x20fails\x20because\x20the\x20directory\x20is\x20non-empty,\x20\
    `FAILED_PRECONDITION`\n\x20\x20\x20\x20\x20\x20should\x20be\x20returned\
    \x20since\x20the\x20client\x20should\x20not\x20retry\x20unless\n\x20\x20\
    \x20\x20\x20\x20the\x20files\x20are\x20deleted\x20from\x20the\x20directo\
    ry.\n\n\x20HTTP\x20Mapping:\x20400\x20Bad\x20Request\n\n\r\n\x05\x05\0\
    \x02\n\x01\x12\x04\xa4\x01\x02\x15\n\r\n\x05\x05\0\x02\n\x02\x12\x04\xa4\
    \x01\x18\x19\n\x8c\x02\n\x04\x05\0\x02\x0b\x12\x04\xad\x01\x02\x0f\x1a\
    \xfd\x01\x20The\x20operation\x20was\x20aborted,\x20typically\x20due\x20t\
    o\x20a\x20concurrency\x20issue\x20such\x20as\n\x20a\x20sequencer\x20chec\
    k\x20failure\x20or\x20transaction\x20abort.\n\n\x20See\x20the\x20guideli\
    nes\x20above\x20for\x20deciding\x20between\x20`FAILED_PRECONDITION`,\n\
    \x20`ABORTED`,\x20and\x20`UNAVAILABLE`.\n\n\x20HTTP\x20Mapping:\x20409\
    \x20Conflict\n\n\r\n\x05\x05\0\x02\x0b\x01\x12\x04\xad\x01\x02\t\n\r\n\
    \x05\x05\0\x02\x0b\x02\x12\x04\xad\x01\x0c\x0e\n\x85\x06\n\x04\x05\0\x02\
    \x0c\x12\x04\xc0\x01\x02\x14\x1a\xf6\x05\x20The\x20operation\x20was\x20a\
    ttempted\x20past\x20the\x20valid\x20range.\x20\x20E.g.,\x20seeking\x20or\
    \n\x20reading\x20past\x20end-of-file.\n\n\x20Unlike\x20`INVALID_ARGUMENT\
    `,\x20this\x20error\x20indicates\x20a\x20problem\x20that\x20may\n\x20be\
    \x20fixed\x20if\x20the\x20system\x20state\x20changes.\x20For\x20example,\
    \x20a\x2032-bit\x20file\n\x20system\x20will\x20generate\x20`INVALID_ARGU\
    MENT`\x20if\x20asked\x20to\x20read\x20at\x20an\n\x20offset\x20that\x20is\
    \x20not\x20in\x20the\x20range\x20[0,2^32-1],\x20but\x20it\x20will\x20gen\
    erate\n\x20`OUT_OF_RANGE`\x20if\x20asked\x20to\x20read\x20from\x20an\x20\
    offset\x20past\x20the\x20current\n\x20file\x20size.\n\n\x20There\x20is\
    \x20a\x20fair\x20bit\x20of\x20overlap\x20between\x20`FAILED_PRECONDITION\
    `\x20and\n\x20`OUT_OF_RANGE`.\x20\x20We\x20recommend\x20using\x20`OUT_OF\
    _RANGE`\x20(the\x20more\x20specific\n\x20error)\x20when\x20it\x20applies\
    \x20so\x20that\x20callers\x20who\x20are\x20iterating\x20through\n\x20a\
    \x20space\x20can\x20easily\x20look\x20for\x20an\x20`OUT_OF_RANGE`\x20err\
    or\x20to\x20detect\x20when\n\x20they\x20are\x20done.\n\n\x20HTTP\x20Mapp\
    ing:\x20400\x20Bad\x20Request\n\n\r\n\x05\x05\0\x02\x0c\x01\x12\x04\xc0\
    \x01\x02\x0e\n\r\n\x05\x05\0\x02\x0c\x02\x12\x04\xc0\x01\x11\x13\n\x82\
    \x01\n\x04\x05\0\x02\r\x12\x04\xc6\x01\x02\x15\x1at\x20The\x20operation\
    \x20is\x20not\x20implemented\x20or\x20is\x20not\x20supported/enabled\x20\
    in\x20this\n\x20service.\n\n\x20HTTP\x20Mapping:\x20501\x20Not\x20Implem\
    ented\n\n\r\n\x05\x05\0\x02\r\x01\x12\x04\xc6\x01\x02\x0f\n\r\n\x05\x05\
    \0\x02\r\x02\x12\x04\xc6\x01\x12\x14\n\xd3\x01\n\x04\x05\0\x02\x0e\x12\
    \x04\xcd\x01\x02\x10\x1a\xc4\x01\x20Internal\x20errors.\x20\x20This\x20m\
    eans\x20that\x20some\x20invariants\x20expected\x20by\x20the\n\x20underly\
    ing\x20system\x20have\x20been\x20broken.\x20\x20This\x20error\x20code\
    \x20is\x20reserved\n\x20for\x20serious\x20errors.\n\n\x20HTTP\x20Mapping\
    :\x20500\x20Internal\x20Server\x20Error\n\n\r\n\x05\x05\0\x02\x0e\x01\
    \x12\x04\xcd\x01\x02\n\n\r\n\x05\x05\0\x02\x0e\x02\x12\x04\xcd\x01\r\x0f\
    \n\xa5\x02\n\x04\x05\0\x02\x0f\x12\x04\xd7\x01\x02\x13\x1a\x96\x02\x20Th\
    e\x20service\x20is\x20currently\x20unavailable.\x20\x20This\x20is\x20mos\
    t\x20likely\x20a\n\x20transient\x20condition,\x20which\x20can\x20be\x20c\
    orrected\x20by\x20retrying\x20with\n\x20a\x20backoff.\n\n\x20See\x20the\
    \x20guidelines\x20above\x20for\x20deciding\x20between\x20`FAILED_PRECOND\
    ITION`,\n\x20`ABORTED`,\x20and\x20`UNAVAILABLE`.\n\n\x20HTTP\x20Mapping:\
    \x20503\x20Service\x20Unavailable\n\n\r\n\x05\x05\0\x02\x0f\x01\x12\x04\
    \xd7\x01\x02\r\n\r\n\x05\x05\0\x02\x0f\x02\x12\x04\xd7\x01\x10\x12\n`\n\
    \x04\x05\0\x02\x10\x12\x04\xdc\x01\x02\x11\x1aR\x20Unrecoverable\x20data\
    \x20loss\x20or\x20corruption.\n\n\x20HTTP\x20Mapping:\x20500\x20Internal\
    \x20Server\x20Error\n\n\r\n\x05\x05\0\x02\x10\x01\x12\x04\xdc\x01\x02\
    \x0b\n\r\n\x05\x05\0\x02\x10\x02\x12\x04\xdc\x01\x0e\x10\nK\n\x02\x04\
    \x02\x12\x06\xe0\x01\0\xee\x01\x01\x1a=\x20Get\x20from\x20github.com/gog\
    o/googleapis/google/rpc/status.proto\n\n\x0b\n\x03\x04\x02\x01\x12\x04\
    \xe0\x01\x08\x0e\nf\n\x04\x04\x02\x02\0\x12\x04\xe3\x01\x02\x10\x1aX\x20\
    The\x20status\x20code,\x20which\x20should\x20be\x20an\x20enum\x20value\
    \x20of\n\x20[google.rpc.Code][google.rpc.Code].\n\n\r\n\x05\x04\x02\x02\
    \0\x06\x12\x04\xe3\x01\x02\x06\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xe3\
    \x01\x07\x0b\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xe3\x01\x0e\x0f\n\xed\
    \x01\n\x04\x04\x02\x02\x01\x12\x04\xe9\x01\x02\x15\x1a\xde\x01\x20A\x20d\
    eveloper-facing\x20error\x20message,\x20which\x20should\x20be\x20in\x20E\
    nglish.\x20Any\n\x20user-facing\x20error\x20message\x20should\x20be\x20l\
    ocalized\x20and\x20sent\x20in\x20the\n\x20[google.rpc.Status.details][go\
    ogle.rpc.Status.details]\x20field,\x20or\x20localized\n\x20by\x20the\x20\
    client.\n\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\xe9\x01\x02\x08\n\r\n\
    \x05\x04\x02\x02\x01\x01\x12\x04\xe9\x01\t\x10\n\r\n\x05\x04\x02\x02\x01\
    \x03\x12\x04\xe9\x01\x13\x14\nz\n\x04\x04\x02\x02\x02\x12\x04\xed\x01\
    \x02\x1b\x1al\x20A\x20list\x20of\x20messages\x20that\x20carry\x20the\x20\
    error\x20details.\x20\x20There\x20is\x20a\x20common\x20set\x20of\n\x20me\
    ssage\x20types\x20for\x20APIs\x20to\x20use.\n\n\r\n\x05\x04\x02\x02\x02\
    \x04\x12\x04\xed\x01\x02\n\n\r\n\x05\x04\x02\x02\x02\x06\x12\x04\xed\x01\
    \x0b\x0e\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\xed\x01\x0f\x16\n\r\n\x05\
    \x04\x02\x02\x02\x03\x12\x04\xed\x01\x19\x1a\n\x0c\n\x02\x04\x03\x12\x06\
    \xf0\x01\0\xf3\x01\x01\n\x0b\n\x03\x04\x03\x01\x12\x04\xf0\x01\x08\x10\n\
    \x0c\n\x04\x04\x03\x02\0\x12\x04\xf1\x01\x08\x1a\n\r\n\x05\x04\x03\x02\0\
    \x06\x12\x04\xf1\x01\x08\x0e\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xf1\x01\
    \x0f\x15\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xf1\x01\x18\x19\n\x0c\n\x04\
    \x04\x03\x02\x01\x12\x04\xf2\x01\x08\x1a\n\r\n\x05\x04\x03\x02\x01\x05\
    \x12\x04\xf2\x01\x08\r\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xf2\x01\x0e\
    \x15\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xf2\x01\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
